load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
load("@rules_cc//cc/private/toolchain:unix_cc_toolchain_config.bzl", "cc_toolchain_config")
load("@rules_cc//cc/toolchains:cc_toolchain.bzl", "cc_toolchain")
load(":config.bzl", "config")

_all_compile_actions = [
    ACTION_NAMES.c_compile,
    ACTION_NAMES.cpp_compile,
    ACTION_NAMES.linkstamp_compile,
    ACTION_NAMES.assemble,
    ACTION_NAMES.preprocess_assemble,
    ACTION_NAMES.cpp_header_parsing,
    ACTION_NAMES.cpp_module_compile,
    ACTION_NAMES.cpp_module_codegen,
    ACTION_NAMES.clif_match,
    ACTION_NAMES.lto_backend,
]

package(default_visibility = ["//visibility:public"])

filegroup(name = "empty")

config(
    name = "config",
    link_flags = ["-lm", "-latomic", "-lstdc++"],
)

cc_toolchain(
    name = "cc-gcc-x86_64-linux",
    all_files = ":empty",
    ar_files = ":empty",
    as_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
    toolchain_config = ":config",
    toolchain_identifier = "cc-gcc-x86_64-linux",
)

toolchain(
    name = "system-cc-toolchain-x86_64-linux",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    target_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        "@rules_swiftnav//cc/constraints:gcc_11_system_toolchain",
    ],
    toolchain = ":cc-gcc-x86_64-linux",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)
