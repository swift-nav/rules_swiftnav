# Copyright (C) 2024 Swift Navigation Inc.
# Contact: Swift Navigation <dev@swift-nav.com>
#
# This source is subject to the license found in the file 'LICENSE' which must
# be be distributed together with this source. All other rights reserved.
#
# THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.

package(default_visibility = ["//visibility:public"])

load("//cc/toolchains/llvm:cc_toolchain_config.bzl", "cc_toolchain_config")

filegroup(
    name = "wrappers",
    srcs = glob([
        "wrappers/**",
    ]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "ar_files",
    srcs = [
        ":wrappers",
        "@x86_64-linux-llvm-mingw//:ar",
    ],
)

filegroup(
    name = "as_files",
    srcs = [
        ":wrappers",
        "@x86_64-linux-llvm-mingw//:as",
    ],
)

filegroup(
    name = "compiler_files",
    srcs = [
        ":wrappers",
        "@x86_64-linux-llvm-mingw//:bin",
        "@x86_64-linux-llvm-mingw//:include",
    ],
)

filegroup(
    name = "dwp_files",
    srcs = [
        ":wrappers",
        "@x86_64-linux-llvm-mingw//:dwp",
    ],
)

filegroup(
    name = "linker_files",
    srcs = [
        ":wrappers",
        "@x86_64-linux-llvm-mingw//:ar",
        "@x86_64-linux-llvm-mingw//:clang",
        "@x86_64-linux-llvm-mingw//:ld",
        "@x86_64-linux-llvm-mingw//:lib",
    ],
)

filegroup(
    name = "objcopy_files",
    srcs = [
        ":wrappers",
        "@x86_64-linux-llvm-mingw//:objcopy",
    ],
)

filegroup(
    name = "strip_files",
    srcs = [
        ":wrappers",
        "@x86_64-linux-llvm-mingw//:strip",
    ],
)

filegroup(
    name = "all_files",
    srcs = [
        ":compiler_files",
        ":linker_files",
        "@x86_64-linux-llvm-mingw//:bin",
    ],
)

cc_toolchain_config(
    name = "local-x86_64-windows",
    abi_libc_version = "glibc_unknown",
    abi_version = "clang",
    compiler = "clang",
    host_system_name = X86_64_LINUX,
    target_cpu = "k8",
    target_libc = "glibc_unknown",
    target_system_name = X86_64_WINDOWS,
    tool_paths = {
        "ar": "wrappers/llvm-ar",
        "cpp": "wrappers/clang-cpp",
        "gcc": "wrappers/clang",
        "gcov": "wrappers/llvm-profdata",
        "llvm-cov": "wrappers/llvm-cov",
        "llvm-profdata": "wrappers/llvm-profdata",
        "ld": "wrappers/ld.ldd",
        "nm": "wrappers/llvm-nm",
        "objcopy": "wrappers/llvm-objcopy",
        "objdump": "wrappers/llvm-objdump",
        "strip": "wrappers/llvm-strip",
    },
    toolchain_identifier = "clang-x86_64-linux",
    toolchain_path_prefix = "external/x86_64-linux-llvm-mingw",
)

cc_toolchain(
    name = "cc_toolchain",
    all_files = ":all_files",
    ar_files = ":ar_files",
    as_files = ":as_files",
    compiler_files = ":compiler_files",
    dwp_files = ":dwp_files",
    linker_files = ":linker_files",
    objcopy_files = ":objcopy_files",
    strip_files = ":strip_files",
    toolchain_config = ":local-x86_64-windows",
)

toolchain(
    name = "cc-toolchain-x86_64-linux",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
    ],
    target_settings = None,
    toolchain = ":cc-clang-x86_64-linux",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)
